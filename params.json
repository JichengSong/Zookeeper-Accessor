{"name":"Zookeeper-accessor","tagline":"This is a common accessor of zookeeper client implements with java","body":"# Zookeeper-Accessor\r\n\r\nREADME version 0.1.0\r\n\r\n[![Build Status](https://drone.io/github.com/ZheYuan/Zookeeper-Accessor/status.png)](https://drone.io/github.com/ZheYuan/Zookeeper-Accessor/latest)\r\n\r\nA common accessor of zookeeper service implements with java. \r\nZookeeper-Accessor was made up of this components:\r\n\r\n* Publish: puslish a service with path /root(in config file)/service.id/version/sharding/endpoint:value.\r\n* Subscribe: subcribe a service with path /root(in config file)/service.id/version/sharding.\r\n* Accessor: client of zookeeper and auto reconnet zookeeper when recive exceptions.\r\n\r\n## Contact\r\n\r\n- Email: yizer16[at]163[dot]com, yizer16[at]gmail[dot]com\r\n\r\n## Getting Started\r\n\r\n### Getting Zookeeper-Accessor\r\n\r\nThe latest release code is available at [Github][github-release].\r\n\r\n[github-release]: https://github.com/ZheYuan/Zookeeper-Accessor/releases\r\n\r\n### Building\r\n\r\nYou can build Zookeeper-Accessor from source:\r\n\r\nYou need setup maven to build this project:\r\n<http://maven.apache.org/>\r\n\r\nRun this command and get the source:\r\n\r\n`git clone https://github.com/ZheYuan/Zookeeper-Accessor.git`\r\n\r\nEnter workcopy and install to local:\r\n\r\n```\r\ncd Zookeeper-Accessor\r\nmvn install\r\n```\r\n\r\nOr\r\n\r\n```\r\ncd Zookeeper-Accessor\r\nmvn assembly:assembly\r\n```\r\nThis will generate two jars in `./target` directory.\r\n\r\n## Using Zookeeper-Accessor\r\n\r\n### Using ZkConfig Class\r\n\r\n`default.config.path` is used to point out config file directory.\r\n\r\nWhen use Accessor with config file in `./conf`, we can run class:\r\n\r\n`java -Ddefault.config.path=./conf`\r\n\r\nand write one line code:\r\n\r\n`ZkConfig config = new ZkConfig();`\r\n\r\nOr you can use ZkConfig provide publish method to set attribute.\r\n\r\n### Using Accessor Class\r\n\r\nThis is a singleton client object of zookeper.\r\n\r\nFirst call with a vaild `ZkConfig` object:\r\n\r\n`Accessor accessor = Accessor.getInstance(config);`\r\n\r\nAnd then if wanna get the lastest singleton in somewhere, just call with a `null`:\r\n\r\n`Accessor accessor2 = Accessor.getInstance(null);`\r\n\r\n### Using Publish Class\r\n\r\nThis class is a service instance use ephemeral node of zookeeper. Each Publish object only publish once, or it will throws an `OperationNotSupportedException`.\r\n\r\n```\r\nPublish publish = new Publish(\"test.service\", \"1\", \"0\",\r\n                            \"PublishTestHandle\", \"127.0.0.1:80\".getBytes());\r\naccessor.publishService(publish);\r\n// Remove the service\r\npublish.die();\r\n// This object's life cycle is same to accessor.\r\naccessor.publishService(new Publish(\"test.service\", \"1\", \"0\", \"PublishTest\", \"127.0.0.1:81\".getBytes());\r\n```\r\n\r\n### Using Subscribe Class\r\n\r\nThis class is a client instance. Each Subscribe objcet only subcribe once, or it will throws an `OperationNotSupportedException`.\r\n\r\nSubscribe class is same to Publish class.\r\n\r\n## License\r\n\r\nZookeeper-Accessor is under the gpl v3.0 license. See the [LICENSE][license] file for details.\r\n\r\n[license]: https://github.com/ZheYuan/Zookeeper-Accessor/blob/master/LICENSE\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}